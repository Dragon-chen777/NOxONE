;(window.webpackJsonp = window.webpackJsonp || []).push([
	[39],
	{
		472: function (t, s, a) {
			'use strict'
			a.r(s)
			var n = a(1),
				r = Object(n.a)(
					{},
					function () {
						var t = this,
							s = t._self._c
						return s('ContentSlotsDistributor', { attrs: { 'slot-key': t.$parent.slotKey } }, [
							s('h2', { attrs: { id: '_4-1-文件名、关键字和标识符' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-1-文件名、关键字和标识符' } }, [t._v('#')]),
								t._v(' 4.1 文件名、关键字和标识符'),
							]),
							t._v(' '),
							s('p', [t._v('略')]),
							t._v(' '),
							s('h2', { attrs: { id: '_4-2-go程序的基本结构和要素' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-2-go程序的基本结构和要素' } }, [t._v('#')]),
								t._v(' 4.2 GO程序的基本结构和要素'),
							]),
							t._v(' '),
							s('h3', { attrs: { id: '_4-2-1-包的概念、导入与可见性' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-2-1-包的概念、导入与可见性' } }, [t._v('#')]),
								t._v(' 4.2.1 包的概念、导入与可见性'),
							]),
							t._v(' '),
							s('p', [s('strong', [t._v('1. 包的概念')])]),
							t._v(' '),
							s('p', [t._v('一个go程序由多个包构成，每个go文件会被包含在不同的包下，通过'), s('code', [t._v('package xx')]), t._v('表明属于哪一个包，最顶层的包为'), s('code', [t._v('main')])]),
							t._v(' '),
							s('p', [t._v('标准库存放在'), s('code', [t._v('$GOROOT/pkg/$GOOS_$GOARCH')]), t._v('目录下')]),
							t._v(' '),
							s('p', [t._v('若对一个包进行更改并重新编译，那么所有引用了这个包的客户端程序都需要重新编译才会生效')]),
							t._v(' '),
							s('p', [
								t._v('依赖图：'),
								s('code', [t._v('A.go')]),
								t._v(' -> '),
								s('code', [t._v('B.go')]),
								t._v(' -> '),
								s('code', [t._v('C.go')]),
								t._v('，编译顺序：'),
								s('code', [t._v('C.go')]),
								t._v(' -> '),
								s('code', [t._v('B.go')]),
								t._v(' -> '),
								s('code', [t._v('A.go')]),
							]),
							t._v(' '),
							s('p', [s('strong', [t._v('2. 包的导入')])]),
							t._v(' '),
							s('p', [t._v('Go程序通过'), s('code', [t._v('import')]), t._v('关键字导入包')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [s('pre', { pre: !0, attrs: { class: 'language-text' } }, [s('code', [t._v('import "fmt"\nimport "os"\n')])])]),
							s('div', { staticClass: 'language-golang extra-class' }, [s('pre', { pre: !0, attrs: { class: 'language-text' } }, [s('code', [t._v('import (\n  "fmt"\n  "os"\n)\n')])])]),
							s('p', [t._v('若包名不是以'), s('code', [t._v('./')]), t._v('或'), s('code', [t._v('/')]), t._v('开头，那么就意味是全局包，否则将会从相对目录或绝对路径中查找包')]),
							t._v(' '),
							s('p', [t._v('导入包会将这个包的所有代码对象加载进来')]),
							t._v(' '),
							s('p', [s('strong', [t._v('3. 包的内部可见性')])]),
							t._v(' '),
							s('p', [
								t._v('在一个包中，若变量以大写字母开头，将会被导出访问（'),
								s('code', [t._v('public')]),
								t._v('）；以小写字母开头，将只能在包内可以访问（'),
								s('code', [t._v('private')]),
								t._v('）'),
							]),
							t._v(' '),
							s('p', [t._v('每一个包都将作为一个命名空间，通过'), s('code', [t._v('xx.Fn')]), t._v('的方式访问其内部的公共方法和属性')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// main.go')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('package')]),
										t._v(' main\n\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('import')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"mod1"')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将会指定mod1为包的命名空间')]),
										t._v('\n\nfunc '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('main')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  mod1'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Fn')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 访问mod1包的公共方法')]),
										t._v('\n  mod1'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('Num '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 访问公共属性')]),
										t._v('\n  mod1'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('Person\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 以下访问无效')]),
										t._v('\n  mod1'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('fn')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  mod1'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('num\n  mod1'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('person\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'// mod1/main.go\npackage mod1\n\n// public\nfunc Fn() { ... }\nvar Num = 1\ntype Person struct {\n  Name string // public\n  id   int // private\n}\n\n// private\nfunc fn() { ... }\nvar num = 2\ntype person struct { ... }\n',
										),
									]),
								]),
							]),
							s('h3', { attrs: { id: '_4-2-2-main函数' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-2-2-main函数' } }, [t._v('#')]), t._v(' 4.2.2 main函数')]),
							t._v(' '),
							s('p', [s('code', [t._v('main()')]), t._v('函数必须指定在'), s('code', [t._v('main')]), t._v('包中，作为go程序的入口，且不能包含传参和返回类型，否则报错！')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('func '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('main')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// ...')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [t._v('函数一旦执行完毕就会退出程序')]),
							t._v(' '),
							s('h2', { attrs: { id: '_4-3-常量' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-3-常量' } }, [t._v('#')]), t._v(' 4.3 常量')]),
							t._v(' '),
							s('p', [t._v('常量定义方式为：'), s('code', [t._v('const xx [type] = val')]), t._v('，存储在常量中数据类型只能是布尔型、数字型和字符串型')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' Pi '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3.14')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('\n  Num '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										t._v('\n  Str '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										t._v('\n  Flag '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('true')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [t._v('常量值必须在编译时就确定，否则报错')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' n '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('getNumber')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// err')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_4-4-变量' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-4-变量' } }, [t._v('#')]), t._v(' 4.4 变量')]),
							t._v(' '),
							s('h3', { attrs: { id: '_4-4-1-声明' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-4-1-声明' } }, [t._v('#')]), t._v(' 4.4.1 声明')]),
							t._v(' '),
							s('p', [t._v('变量的完整声明方式为：'), s('code', [t._v('var xx [type] = val')])]),
							t._v(' '),
							s('p', [t._v('只声明不赋值')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' a int '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 这时默认值为0')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [t._v('多个声明')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('\n  a int '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 默认0')]),
										t._v('\n  b str '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 默认""')]),
										t._v('\n  c bool '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 默认false')]),
										t._v('\n  d floot '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 默认0.0')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [t._v('声明并赋值')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' a int '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' b '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 自动类型推断')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' c string '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [t._v('在函数体或代码块(if、for)外部声明时将作为全局变量，否则为局部变量')]),
							t._v(' '),
							s('p', [t._v('局部变量声明简写')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('func '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('fn')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 函数内部')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('a')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('i')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' i'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('<')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' i'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('++')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 代码块{}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('b')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('true')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '_4-4-2-值类型和引用类型' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-4-2-值类型和引用类型' } }, [t._v('#')]),
								t._v(' 4.4.2 值类型和引用类型'),
							]),
							t._v(' '),
							s('p', [
								t._v('对于int、float、bool、string以及'),
								s('code', [t._v('array')]),
								t._v('、'),
								s('code', [t._v('struct')]),
								t._v('类型都属于值类型，变量存储的是'),
								s('code', [t._v('存放在内存中的值')]),
								t._v('，赋值操作执行的是'),
								s('code', [t._v('值拷贝')]),
							]),
							t._v(' '),
							s('p', [t._v('对于slice、map、channel都属于引用类型，变量存储的是'), s('code', [t._v('指针')]), t._v('，赋值操作执行的是'), s('code', [t._v('指针拷贝')])]),
							t._v(' '),
							s('h2', { attrs: { id: '_4-5-基本类型和运算符' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-5-基本类型和运算符' } }, [t._v('#')]), t._v(' 4.5 基本类型和运算符')]),
							t._v(' '),
							s('h3', { attrs: { id: '_4-5-1-布尔类型-bool' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-5-1-布尔类型-bool' } }, [t._v('#')]), t._v(' 4.5.1 布尔类型 bool')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' flag bool '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('true')]),
										t._v('\n'),
									]),
								]),
							]),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' n '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('10')]),
										t._v('\n\nn '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('==')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('10')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// true')]),
										t._v('\nn '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('==')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// false')]),
										t._v('\nn '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// true')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '_4-5-2-数字类型' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-5-2-数字类型' } }, [t._v('#')]), t._v(' 4.5.2 数字类型')]),
							t._v(' '),
							s('p', [t._v('GO语言数字类型包括整型、浮点型、复数')]),
							t._v(' '),
							s('p', [s('strong', [t._v('整型int、uint')])]),
							t._v(' '),
							s('p', [
								s('code', [t._v('int')]),
								t._v('和'),
								s('code', [t._v('uint')]),
								t._v('在64位操作系统上使用64位存储，即'),
								s('code', [t._v('int64')]),
								t._v('、'),
								s('code', [t._v('uint64')]),
								t._v('；在32位操作系统上使用32位存储'),
							]),
							t._v(' '),
							s('p', [t._v('数值范围')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('int8')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('128')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('127')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' 即'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('^')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('^')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\nint16、int32、int64\n\n'),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('uint8')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('255')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' 即'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('^')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('8')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\nuint16、uint32、uint64\n'),
									]),
								]),
							]),
							s('p', [t._v('示例')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' n1 int8 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('128')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' n2 int '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('127500')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' n3 uint8 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('255')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' n4 uint '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('25500')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('浮点型float')])]),
							t._v(' '),
							s('p', [t._v('数值范围')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('float32')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1e-45')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3.4e38')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('float64')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5e-324')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('107e308')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [
								t._v('float32精确到'),
								s('code', [t._v('小数点后7位')]),
								t._v('，float64精确到'),
								s('code', [t._v('小数点后15位')]),
								t._v('（从首个非零数开始算）,因此在作赋值或比较操作时要小心'),
								s('code', [t._v('精度缺失')]),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' f1 float32 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0.0123456789')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' f2 float32 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0.00000123456789')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' f3 float64 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0.0123456789')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' f4 float64 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0.00000123456789')]),
										t._v('\n\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('f1'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' f2'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 0.012345679  1.2345679e-06')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('f3'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' f4'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 0.0123456789 1.23456789e-06')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '_4-5-3-运算符优先级' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-5-3-运算符优先级' } }, [t._v('#')]), t._v(' 4.5.3 运算符优先级')]),
							t._v(' '),
							s('p', [t._v('有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('优先级     运算符\n '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										t._v('         '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('^')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('\n '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										t._v('         '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('*')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('/')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('%')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('<<')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('>>')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('^')]),
										t._v('\n '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										t._v('         '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('|')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('^')]),
										t._v('\n '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										t._v('         '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('==')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('<')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('<=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('>=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('>')]),
										t._v('\n '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										t._v('         '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('<')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('-')]),
										t._v('\n '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										t._v('         '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v('\n '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										t._v('         '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_4-6-字符串' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-6-字符串' } }, [t._v('#')]), t._v(' 4.6 字符串')]),
							t._v(' '),
							s('p', [t._v('略')]),
							t._v(' '),
							s('h2', { attrs: { id: '_4-7-strings和strconv包' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-7-strings和strconv包' } }, [t._v('#')]),
								t._v(' 4.7 strings和strconv包'),
							]),
							t._v(' '),
							s('h3', { attrs: { id: '_4-7-1-strings' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-7-1-strings' } }, [t._v('#')]), t._v(' 4.7.1 strings')]),
							t._v(' '),
							s('p', [t._v('go使用'), s('code', [t._v('strings')]), t._v('包来完成字符串操作（不像js靠原型链原生就已经实现好了）')]),
							t._v(' '),
							s('p', [t._v('以下是常用方法')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('HasPrefix')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' prefix string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' bool '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 是否以prefix开头')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('HasSuffix')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' suffix string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' bool '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 是否以suffix结尾')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Contains')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' substr string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' bool '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 是否包含substr子字符串')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Index')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' str string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' int '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 从前往后查询，返回首个匹配str索引，无则返-1')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('LastIndex')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' str string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' int '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 从后往前查询...')]),
										t._v('\n\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Replace')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('str'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' old'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('new')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token class-name' } }, [t._v('string')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' n int'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将str的前n个子串old替换成new，若n=-1则替换所有old，并返回新字符串')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Repeat')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' n int'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将s重复n次并返回')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('ToLower')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将s转小写并返回')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('ToUpper')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将s转大写并返回')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('TrimSpace')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' tring '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将s前后空白符去掉并返回')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Trim')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' sub string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将s前后sub子字符串去掉并返回')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('TrimLeft')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' sub string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将s前sub子字符串去掉并返回')]),
										t._v('\n\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Fields')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' slice '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 以空白作为分隔符，将s分割转为slice并返回')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Split')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' sep string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' slice '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 以sep作为分隔符，将s分割转为slice并返回')]),
										t._v('\nstrings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Join')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('sl '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' sep string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 以sep作为分隔符，将sl切片转成字符串并返回')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [t._v('示例')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('fmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('HasPrefix')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"ab"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// true')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('HasSuffix')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"b"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// false')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Contains')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"bc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// true')]),
										t._v('\n\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Index')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"b"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 1')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('LastIndex')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"aabbbcc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"b"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 4')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Replace')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"mmabcmmabcmmabc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"x"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// mmxmmxmmabc')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Repeat')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// abcabcabc')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('ToLower')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"ABC"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// abc')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('ToUpper')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// ABC')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('TrimSpace')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('" abc "')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// abc')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Trim')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"xxabcxx"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"xx"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// abc')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('TrimLeft')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"xxabcxx"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"xx"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// abcxx')]),
										t._v('\n\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Fields')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"abc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// ["abc"]')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Split')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"axbxc"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"x"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// ["a" "b" "c"]')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// arr := []string{"a", "b", "c"}')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// sl := arr[0:3]')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('sl')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"a"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"b"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"c"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// ["a" "b" "c"]')]),
										t._v('\nfmt'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Println')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('strings'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Join')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('sl'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v('"x"')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// axbxc')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '_4-7-2-strconv' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-7-2-strconv' } }, [t._v('#')]), t._v(' 4.7.2 strconv')]),
							t._v(' '),
							s('p', [s('code', [t._v('strconv')]), t._v('包用于字符串的类型转换')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('strconv'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Itoa')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('n int'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将数字n转字符串')]),
										t._v('\nstrconv'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('FormatFloat')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('f float64'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' fmt byte'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' prec int'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' bitSize int'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' string '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 将浮点数f转为字符串，格式为fmt，精度为prec，bitSize使用32对应float32，64对应float64')]),
										t._v('\nstrconv'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('Atoi')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('i int'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' err error'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 字符串转数字')]),
										t._v('\nstrconv'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('ParseFloat')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('s string'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' bitSize int'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('f float64'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' err error'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 字符串转换为浮点')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_4-8-指针' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-8-指针' } }, [t._v('#')]), t._v(' 4.8 指针')]),
							t._v(' '),
							s('ol', [
								s('li', [t._v('指针就是指向另一个内存地址的值')]),
								t._v(' '),
								s('li', [t._v('指针变量就是保存内存地址的变量')]),
								t._v(' '),
								s('li', [t._v('*（菊花）操作就是取出内存地址所对应的值')]),
							]),
							t._v(' '),
							s('p', [s('a', { attrs: { href: 'https://learnku.com/go/t/35168', target: '_blank', rel: 'noopener noreferrer' } }, [t._v('传送门'), s('OutboundLink')], 1)]),
						])
					},
					[],
					!1,
					null,
					null,
					null,
				)
			s.default = r.exports
		},
	},
])
