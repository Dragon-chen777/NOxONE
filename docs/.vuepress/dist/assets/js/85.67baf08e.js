;(window.webpackJsonp = window.webpackJsonp || []).push([
	[85],
	{
		519: function (t, s, a) {
			'use strict'
			a.r(s)
			var n = a(1),
				r = Object(n.a)(
					{},
					function () {
						var t = this,
							s = t._self._c
						return s('ContentSlotsDistributor', { attrs: { 'slot-key': t.$parent.slotKey } }, [
							s('h2', { attrs: { id: '_0-二叉树遍历模板' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#_0-二叉树遍历模板' } }, [t._v('#')]), t._v(' 0. 二叉树遍历模板')]),
							t._v(' '),
							s('h3', { attrs: { id: '先序js' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#先序js' } }, [t._v('#')]), t._v(' 先序JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 先序递归')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 当前节点操作...')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 先序迭代')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 当前节点操作...')]),
										t._v('\n    \n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '先序golang' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#先序golang' } }, [t._v('#')]), t._v(' 先序Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'// 先序递归\nfunc dfs(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  // 当前节点操作...\n  \n  dfs(root.Left)\n  dfs(root.Right)\n  return root\n}\n\n// 先序迭代\nfunc dfs(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  stk := []*TreeNode{root}\n  var cur *TreeNode\n  \n  for len(stk) > 0 {\n    cur, stk = stk[len(stk)-1], stk[:len(stk)-1]\n    // 当前节点操作...\n    \n    if cur.Right != nil {\n      stk = append(stk, cur.Right)\n    }\n    if cur.Left != nil {\n      stk = append(stk, cur.Left)\n    }\n  }\n  return root\n}\n',
										),
									]),
								]),
							]),
							s('h3', { attrs: { id: '中序js' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#中序js' } }, [t._v('#')]), t._v(' 中序JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 中序递归')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 当前节点操作...')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root  \n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 中序迭代')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left\n      '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('continue')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 当前节点操作...')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '中序golang' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#中序golang' } }, [t._v('#')]), t._v(' 中序Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'// 中序递归\nfunc dfs(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n\n  dfs(root.Left)\n  // 当前节点操作...\n  dfs(root.Right)\n  return root\n}\n\n// 中序迭代\nfunc dfs(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  stk := []*TreeNode{}\n  cur := root\n\n  for cur != nil || len(stk) > 0 {\n    if (cur != nil) {\n      stk = append(stk, cur)\n      cur = cur.Left\n      continue\n    }\n    cur, stk = stk[len(stk) - 1] , stk[:len(stk) - 1]\n    // 当前节点操作...\n    cur = cur.Right\n  }\n\n  return root\n}\n',
										),
									]),
								]),
							]),
							s('h3', { attrs: { id: '后序js' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#后序js' } }, [t._v('#')]), t._v(' 后序JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 后序递归')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 当前节点操作...')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root  \n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 后序迭代')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk2 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    stk2'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('stk2'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk2'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '后序golang' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#后序golang' } }, [t._v('#')]), t._v(' 后序Golang')]),
							t._v(' '),
							s('p', [t._v('懒得写了')]),
							t._v(' '),
							s('h3', { attrs: { id: '层序js' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#层序js' } }, [t._v('#')]), t._v(' 层序JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('bfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 当前节点操作...')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 当前层遍历结束后的操作...')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: '层序golang' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#层序golang' } }, [t._v('#')]), t._v(' 层序Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'func bfs(root *TreeNode) *TreeNode {\n  if (root == nil) {\n    return nil\n  }\n  queue := []*TreeNode{root}\n\n  for len(queue) > 0 {\n    l := len(queue)\n    for i := 0; i < l; i++ {\n      cur := queue[i]\n      // 当前节点操作...\n      if cur.Left != nil {\n        queue = append(queue, cur.Left)\n      }\n      if cur.Right != nil {\n        queue = append(queue, cur.Right)\n      }\n   }\n   queue = queue[l:]\n   // 当前层遍历结束后的操作...\n  }\n  return root\n}\n',
										),
									]),
								]),
							]),
							s('h3', { attrs: { id: '总结' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#总结' } }, [t._v('#')]), t._v(' 总结')]),
							t._v(' '),
							s('p', [s('code', [t._v('JS')]), t._v(' 写起来代码量明显少很多，简洁又优雅')]),
							t._v(' '),
							s('p', [
								s('code', [t._v('Golang')]),
								t._v(' 交换变量很便捷，且跑测试用例时，耗时比'),
								s('code', [t._v('JS')]),
								t._v('短很多很多很多。但切片（数组）的'),
								s('code', [t._v('pop')]),
								t._v('、'),
								s('code', [t._v('shift')]),
								t._v('、'),
								s('code', [t._v('push')]),
								t._v('方法需要自己实现，相对来说没有'),
								s('code', [t._v('JS')]),
								t._v('灵动'),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'// push\narr = append(arr, n)\n// pop\nitem, arr = arr[len(arr) - 1], arr[:len(arr) - 1]\n// shift\nitem, arr = arr[0], arr[1:]\n// slice\narr[2:5] // 截取下标范围 [2, 5)\narr[:5] // 截取下标范围 [0, 5)\narr[2:] // 相当于 arr[2: len(arr)]\n',
										),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_1-翻转二叉树-先中后层序' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_1-翻转二叉树-先中后层序' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/invert-binary-tree/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('1. 翻转二叉树（先中后层序）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [s('code', [t._v('先中后层序')])]),
							t._v(' '),
							s('p', [t._v('给你一棵二叉树的根节点 '), s('code', [t._v('root')]), t._v(' ，翻转这棵二叉树，并返回其根节点。')]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/838a5276371e4e23bc6ce8c658c4c360~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=911&h=301&s=34272&e=jpg&b=fefcfc',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/264ededa5f984101bc35b7305e128663~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=761&h=182&s=15045&e=jpg&b=fefefe',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 先序递归')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('inverTree')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('inverTree')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('inverTree')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 后序递归')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('invertTree')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('invertTree')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('invertTree')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 中序递归')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('inverTree')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('inverTree')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('inverTree')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 右子节点由于交换过，所以为left')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 先序迭代')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('invertTree')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n\n    '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 先右后左 压栈')]),
										t._v('\n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 中序迭代')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('invertTree')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left\n      '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('continue')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 右子节点由于交换过，所以为left')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 后序迭代')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('invertTree')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' stk2 '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    stk2'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('stk2'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' stk2'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('pop')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 层序遍历')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('invertTree')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n      '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'golang' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#golang' } }, [t._v('#')]), t._v(' Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'// 先序递归\nfunc invertTree(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  root.Right, root.Left = root.Left, root.Right\n  \n  invertTree(root.Left)\n  invertTree(root.Right)\n  \n  return root\n}\n\n// 中序递归\nfunc invertTree(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  \n  invertTree(root.Left)\n  root.Right, root.Left = root.Left, root.Right\n  invertTree(root.Left) // 这时候right已经变为left了\n  \n  return root\n}\n\n// 后序递归\nfunc invertTree(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  \n  invertTree(root.Left)\n  invertTree(root.Right)\n \n  root.Right, root.Left = root.Left, root.Right\n  return root\n}\n\n// 先序迭代\nfunc invertTree(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  stk := []*TreeNode{root}\n  var cur *TreeNode\n\n  for len(stk) > 0 {\n    cur, stk = stk[len(stk)-1], stk[:len(stk)-1]\n    cur.Right, cur.Left = cur.Left, cur.Right\n    if cur.Right != nil {\n      stk = append(stk, cur.Right)\n    }\n    if cur.Left != nil {\n      stk = append(stk, cur.Left)\n    }\n  }\n  return root\n}\n\n// 中序迭代\nfunc invertTree(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  stk := []*TreeNode{}\n  cur := root\n\n  for cur != nil || len(stk) > 0 {\n    if (cur == nil) {\n      cur, stk = stk[len(stk) - 1], stk[:len(stk) - 1]\n      cur.Right, cur.Left = cur.Left, cur.Right\n      cur = cur.Left // 因为交换过\n      continue\n    }\n    stk = append(stk, cur)\n    cur = cur.Left\n  }\n  return root\n}\n\n// 层序遍历\nfunc invertTree(root *TreeNode) *TreeNode {\n  if root == nil {\n    return nil\n  }\n  queue := []*TreeNode{root}\n  \n   for len(queue) > 0 { \n     l := len(queue) \n     for i := 0; i < l; i++ { \n       cur := queue[i] \n       cur.Left, cur.Right = cur.Right, cur.Left \n       if cur.Left != nil { \n         queue = append(queue, cur.Left) \n       } \n       if cur.Right != nil { \n         queue = append(queue, cur.Right) \n       } \n    } \n    queue = queue[l:] \n  }\n  return root\n}\n',
										),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_2-二叉树的层序遍历-ii-层序-中等' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_2-二叉树的层序遍历-ii-层序-中等' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('2. 二叉树的层序遍历 II（层序）（中等）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [
								t._v('给你二叉树的根节点 '),
								s('code', [t._v('root')]),
								t._v(' ，返回其节点值 '),
								s('strong', [t._v('自底向上的层序遍历')]),
								t._v(' 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）'),
							]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4e9d17126a34d778453a63b7e42f3ea~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=277&h=302&s=11387&e=jpg&b=fefefe',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('20')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('15')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('15')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('20')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2：')])]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-2' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-2' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('levelOrderBottom')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' ret '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' tempArr '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      tempArr'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n    ret'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('tempArr'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' ret'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('reverse')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'golang-2' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#golang-2' } }, [t._v('#')]), t._v(' Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'func levelOrderBottom(root *TreeNode) [][]int {\n  ret := [][]int{}\n  if (root == nil) {\n    return ret\n  }\n  \n  queue := []*TreeNode{root}\n\n  for len(queue) > 0 {\n    tempArr := []int{}\n    l := len(queue)\n    for i := 0; i < l; i++ {\n      cur := queue[i]\n      tempArr = append(tempArr, cur.Val)\n      if cur.Left != nil {\n        queue = append(queue, cur.Left)\n      }\n      if cur.Right != nil {\n        queue = append(queue, cur.Right)\n      }\n    }\n    ret = append(ret, tempArr)\n    queue = queue[l:]\n  }\n\n  return reverseSlice(ret)\n}\nfunc reverseSlice(slice [][]int) [][]int {\n  for i, j := 0, len(slice) - 1; i < j; i, j = i + 1, j -1 {\n    slice[i], slice[j] = slice[j], slice[i]\n  }\n  return slice\n}\n',
										),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_3-二叉树的右视图-层序-中等' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_3-二叉树的右视图-层序-中等' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/binary-tree-right-side-view/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('3. 二叉树的右视图（层序）（中等）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [
								t._v('给定一个二叉树的 '),
								s('strong', [t._v('根节点')]),
								t._v(' '),
								s('code', [t._v('root')]),
								t._v('，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。'),
							]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1:')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bceb354676524c94a567edf85045314c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=401&h=301&s=14835&e=jpg&b=ffffff',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('输入')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('输出')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2:')])]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('输入')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token literal-property property' } }, [t._v('输出')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-3' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-3' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('rightSideView')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' ret '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n    ret'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' ret\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'golang-3' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#golang-3' } }, [t._v('#')]), t._v(' Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'func rightSideView(root *TreeNode) []int {\n  ret := []int{}\n  if (root == nil){\n    return ret\n  }\n  queue := []*TreeNode{root}\n  var cur *TreeNode\n  \n  for len(queue) > 0 {\n    l := len(queue)\n\n    for i := 0; i < l; i++ {\n      cur =  queue[i]\n      if cur.Left != nil {\n        queue = append(queue, cur.Left)\n      }\n      if cur.Right != nil {\n        queue = append(queue, cur.Right)\n      }\n    }\n    ret = append(ret, cur.Val)\n    queue = queue[l:]\n  }\n  return ret\n}\n',
										),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_4-二叉树的层平均值-层序' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_4-二叉树的层平均值-层序' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/average-of-levels-in-binary-tree/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('4. 二叉树的层平均值（层序）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [
								t._v('给定一个非空二叉树的根节点 '),
								s('code', [t._v('root')]),
								t._v(' , 以数组的形式返回每一层节点的平均值。与实际答案相差 '),
								s('code', [t._v('10-5')]),
								t._v(' 以内的答案可以被接受。'),
							]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff1b6caeb9d94f62b82ed099418f0bea~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=277&h=302&s=11138&e=jpg&b=fefefe',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('20')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('15')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3.00000')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('14.50000')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('11.00000')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n解释： 第 '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										t._v(' 层的平均值为 '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v('第 '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										t._v(' 层的平均值为 '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('14.5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v('第 '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										t._v(' 层的平均值为 '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('11')]),
										t._v(' 。\n因此返回 '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('14.5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('11')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' 。\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2:')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93d22846a41d40a8804f696044e082e1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=292&h=302&s=11358&e=jpg&b=fefefe',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('20')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('15')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3.00000')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('14.50000')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('11.00000')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-4' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-4' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('averageOfLevels')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' ret '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' sum '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' total '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' len\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      sum '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+=')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n    ret'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('sum '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('/')]),
										t._v(' total'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' ret\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'golang-4' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#golang-4' } }, [t._v('#')]), t._v(' Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'func averageOfLevels(root *TreeNode) []float64 {\n  ret := []float64{}\n  if root == nil {\n    return ret\n  }\n\n  queue := []*TreeNode{root}\n  for len(queue) > 0 {\n    l := len(queue)\n    sum := 0\n    for i := 0; i < l; i++ {\n      cur := queue[i]\n      sum += cur.Val\n      if cur.Left != nil {\n        queue = append(queue, cur.Left)\n      }\n      if cur.Right != nil {\n        queue = append(queue, cur.Right)\n      }\n    }\n    // 这里是重点，int转float64\n    ret = append(ret, float64(sum) / float64(l))\n    queue = queue[l:]\n  }\n  return ret\n}\n',
										),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_5-n-叉树的层序遍历-层序' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_5-n-叉树的层序遍历-层序' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/n-ary-tree-level-order-traversal/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('5. N 叉树的层序遍历（层序）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [t._v('给定一个 N 叉树，返回其节点值的'), s('em', [t._v('层序遍历')]), t._v('。（即从左到右，逐层遍历）。')]),
							t._v(' '),
							s('p', [t._v('树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。')]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50f4bfa786c04790ae5e9cd92e2db2d0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=781&h=502&s=30744&e=png&b=ffffff',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b50162f3f19474b8f772ab02060e662~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=596&h=541&s=31486&e=png&b=fefefe',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('8')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('10')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('11')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('12')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('13')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('14')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('8')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('10')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('11')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('12')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('13')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('14')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-5' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-5' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('levelOrder')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' ret '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' tempArr '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      tempArr'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('children '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('children'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('forEach')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('node')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=>')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('node'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n    ret'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('tempArr'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' ret\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'golang-5' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#golang-5' } }, [t._v('#')]), t._v(' Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'func levelOrder(root *Node) [][]int {\n  ret := [][]int{}\n  if root == nil {\n    return ret\n  }\n  queue := []*Node{root}\n  \n  for len(queue) > 0 {\n    l := len(queue)\n    tempArr := []int{}\n    for i := 0; i < l; i++ {\n      cur := queue[i]\n      tempArr = append(tempArr, cur.Val)\n      for _, node := range cur.Children {\n        queue = append(queue, node)\n      }\n    }\n    ret = append(ret, tempArr)\n    queue = queue[l:]\n  }\n  return ret\n}\n',
										),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_6-填充每个节点的下一个右侧节点指针-层序-中等' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_6-填充每个节点的下一个右侧节点指针-层序-中等' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('6. 填充每个节点的下一个右侧节点指针（层序）（中等）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [t._v('给定一个 '), s('strong', [t._v('完美二叉树')]), t._v(' ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [s('code', [t._v('struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n')])]),
							]),
							s('p', [
								t._v('填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 '),
								s('code', [t._v('NULL')]),
								t._v('。初始状态下，所有 next 指针都被设置为 '),
								s('code', [t._v('NULL')]),
								t._v('。'),
							]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d481c3b27d704b1db5071fbab15f665b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1058&h=361&s=32568&e=png&b=ffffff',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v('#'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v('#'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v('#'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n解释： 给定二叉树如图 '),
										s('span', { pre: !0, attrs: { class: 'token constant' } }, [t._v('A')]),
										t._v(' 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 '),
										s('span', { pre: !0, attrs: { class: 'token constant' } }, [t._v('B')]),
										t._v(' 所示。序列化的输出按层序遍历排列，同一层节点由 next 指针连接，'),
										s('span', { pre: !0, attrs: { class: 'token string' } }, [t._v("'#'")]),
										t._v(' 标志着每一层的结束。\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-6' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-6' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('connect')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' pre '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('pre'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' pre'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('next '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' cur\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      pre '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' cur\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n   \n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' root\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'golang-6' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#golang-6' } }, [t._v('#')]), t._v(' Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'func connect(root *Node) *Node {\n  if root == nil {\n    return root\n  }\n  \n  queue := []*Node{root}\n  for l := len(queue); l > 0; l = len(queue) {\n    var pre *Node\n    for i := 0; i < l; i++ {\n      cur := queue[i]\n      if pre != nil {\n        pre.Next = cur\n      }\n      if cur.Left != nil {\n        queue = append(queue, cur.Left)\n      }\n      if cur.Right != nil {\n        queue = append(queue, cur.Right)\n      }\n      pre = cur\n    }\n    queue = queue[l:]\n  }\n  return root \n}\n',
										),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_7-二叉树的最大深度-先后层序-简单' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_7-二叉树的最大深度-先后层序-简单' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/maximum-depth-of-binary-tree/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('7. 二叉树的最大深度（先后层序）（简单）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [t._v('给定一个二叉树 '), s('code', [t._v('root')]), t._v(' ，返回其最大深度。')]),
							t._v(' '),
							s('p', [t._v('二叉树的 '), s('strong', [t._v('最大深度')]), t._v(' 是指从根节点到最远叶子节点的最长路径上的节点数。')]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/351234f7929e445fba1d6b4490accff4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=422&h=292&s=12823&e=jpg&b=ffffff',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('20')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('15')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2：')])]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-7' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-7' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 层序遍历（最简明）')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('maxDepth')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('const')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' ret '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    ret'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('++')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' ret\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 先序遍历')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('maxDepth')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root'), s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]), t._v(' depth')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' depth\n\n    depth'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('++')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' lDepth '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' depth'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' rDepth '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' depth'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' Math'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('max')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('depth'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' lDepth'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' rDepth'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 后序遍历')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('maxDepth')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' Math'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('max')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('dfs')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_8-二叉树的最小深度-后层序' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_8-二叉树的最小深度-后层序' } }, [t._v('#')]),
								t._v(' '),
								s(
									'a',
									{ attrs: { href: 'https://leetcode.cn/problems/minimum-depth-of-binary-tree/', target: '_blank', rel: 'noopener noreferrer' } },
									[t._v('8. 二叉树的最小深度（后层序）'), s('OutboundLink')],
									1,
								),
							]),
							t._v(' '),
							s('p', [t._v('给定一个二叉树，找出其最小深度。')]),
							t._v(' '),
							s('p', [t._v('最小深度是从根节点到最近叶子节点的最短路径上的节点数量。')]),
							t._v(' '),
							s('p', [s('strong', [t._v('说明：')]), t._v(' 叶子节点是指没有子节点的节点。')]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86e92f7e77c74e05807538f68b85b271~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=432&h=302&s=12800&e=jpg&b=ffffff',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('9')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('20')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('15')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('7')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2：')])]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('6')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('5')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-8' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-8' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 后序')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('minDepth')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 1.确定函数传参和返回值')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 2.确定终止条件')]),
										t._v('\n\n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 3.确定单层递归条件')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 左 -> minDepth(root.left) ')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 右 -> minDepth(root.right) ')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 中 -> +1')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('minDepth')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 这里左被干掉了')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('minDepth')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 这里右被干掉了')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' Math'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('min')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('minDepth')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('minDepth')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('+')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 层序')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('minDepth')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('?')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v(':')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' ret '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('0')]),
										t._v(' \n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('for')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(';')]),
										t._v(' len '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    ret'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('++')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('len'),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('--')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n      cur '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' ret\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n      cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('cur'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' ret\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h2', { attrs: { id: '_9-对称二叉树-先层序' } }, [
								s('a', { staticClass: 'header-anchor', attrs: { href: '#_9-对称二叉树-先层序' } }, [t._v('#')]),
								t._v(' '),
								s('a', { attrs: { href: 'https://leetcode.cn/problems/symmetric-tree/', target: '_blank', rel: 'noopener noreferrer' } }, [t._v('9. 对称二叉树（先层序）'), s('OutboundLink')], 1),
							]),
							t._v(' '),
							s('p', [t._v('给你一个二叉树的根节点 '), s('code', [t._v('root')]), t._v(' ， 检查它是否轴对称。')]),
							t._v(' '),
							s('p', [s('strong', [t._v('示例 1：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36312666d17142919cfd67dc9b311d4c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=354&h=291&s=15374&e=jpg&b=fefefe',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('4')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('true')]),
										t._v('\n'),
									]),
								]),
							]),
							s('p', [s('strong', [t._v('示例 2：')])]),
							t._v(' '),
							s('p', [
								s('img', {
									attrs: {
										src: 'https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75f80e811e1e4baa9f31bcb9bbe27c51~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=308&h=258&s=10207&e=jpg&b=fefefe',
										alt: '',
									},
								}),
							]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										t._v('输入： root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('1')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('2')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										s('span', { pre: !0, attrs: { class: 'token number' } }, [t._v('3')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n输出： '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('false')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'js-9' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#js-9' } }, [t._v('#')]), t._v(' JS')]),
							t._v(' '),
							s('div', { staticClass: 'language-js extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-js' } }, [
									s('code', [
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 先序')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('isSymmetric')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('compareNode')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('compareNode')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('l'), s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]), t._v(' r')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('l '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('true')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('l '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('r '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' l'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!==')]),
										t._v(' r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('false')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('compareNode')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('l'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('compareNode')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('l'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n\n'),
										s('span', { pre: !0, attrs: { class: 'token comment' } }, [t._v('// 层序')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('var')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token function-variable function' } }, [t._v('isSymmetric')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('function')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token parameter' } }, [t._v('root')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('true')]),
										t._v('\n  \n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' queue '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('[')]),
										t._v('root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(',')]),
										t._v(' root'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(']')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('let')]),
										t._v(' l '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' r '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('null')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('while')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('length'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('{')]),
										t._v('\n    l '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    r '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('=')]),
										t._v(' queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('shift')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('l '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('&&')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('continue')]),
										t._v('\n    '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('if')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('l '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!')]),
										t._v('r '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('||')]),
										t._v(' l'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val '),
										s('span', { pre: !0, attrs: { class: 'token operator' } }, [t._v('!==')]),
										t._v(' r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('val'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('false')]),
										t._v('\n\n    queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('l'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('l'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('right'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n    queue'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										s('span', { pre: !0, attrs: { class: 'token function' } }, [t._v('push')]),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('(')]),
										t._v('r'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('.')]),
										t._v('left'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v(')')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n  '),
										s('span', { pre: !0, attrs: { class: 'token keyword' } }, [t._v('return')]),
										t._v(' '),
										s('span', { pre: !0, attrs: { class: 'token boolean' } }, [t._v('true')]),
										t._v('\n'),
										s('span', { pre: !0, attrs: { class: 'token punctuation' } }, [t._v('}')]),
										t._v('\n'),
									]),
								]),
							]),
							s('h3', { attrs: { id: 'golang-7' } }, [s('a', { staticClass: 'header-anchor', attrs: { href: '#golang-7' } }, [t._v('#')]), t._v(' Golang')]),
							t._v(' '),
							s('div', { staticClass: 'language-golang extra-class' }, [
								s('pre', { pre: !0, attrs: { class: 'language-text' } }, [
									s('code', [
										t._v(
											'// 先序\nfunc isSymmetric(root *TreeNode) bool {\n  return root == nil || compareNode(root.Left, root.Right)\n}\nfunc compareNode(l, r *TreeNode) bool {\n  if l == nil && r == nil {\n    return true\n  }\n  if l == nil || r == nil || l.Val != r.Val {\n    return false\n  }\n  return compareNode(l.Left, r.Right) && compareNode(l.Right, r.Left)\n}\n\n// 层序\nfunc isSymmetric(root *TreeNode) bool {\n  if root == nil {\n    return true\n  }\n  var queue = []*TreeNode{root.Left, root.Right}\n  for len(queue) > 0 {\n    l := queue[0]\n    r := queue[1]\n    queue = queue[2:]\n    if l == nil && r == nil {\n      continue\n    }\n    if l == nil || r == nil || l.Val != r.Val {\n      return false\n    }\n    queue = append(queue, l.Left, r.Right, l.Right, r.Left)\n  }\n  return true\n}\n',
										),
									]),
								]),
							]),
						])
					},
					[],
					!1,
					null,
					null,
					null,
				)
			s.default = r.exports
		},
	},
])
